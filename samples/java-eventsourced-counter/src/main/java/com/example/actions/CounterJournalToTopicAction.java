/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package com.example.actions;

import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.SideEffect;
import com.example.domain.CounterDomain;
import com.example.CounterApi;
import com.google.protobuf.Empty;
import com.google.protobuf.Any;

import java.util.Optional;

/** An action. */
// tag::counter-topic[]
// tag::counter-ignore[]
public class CounterJournalToTopicAction extends AbstractCounterJournalToTopicAction {
// end::counter-ignore[]
  private final ServiceCallRef<CounterApi.GetCounter> getterCallRef;
  public CounterJournalToTopicAction(ActionCreationContext creationContext) {
     this.getterCallRef =  creationContext.serviceCallFactory().lookup(
      "com.example.CounterService",
      "GetCurrentCounter",
      CounterApi.GetCounter.class);
  }

  /** Handler for "Increase". */
  // tag::counter-topic-event-subject[]
  @Override
  public Effect<CounterTopicApi.Increased> increase(CounterDomain.ValueIncreased valueIncreased) {
    // end::counter-topic[]
    Optional<String> counterId = actionContext().eventSubject(); //<1>
    // end::counter-topic-event-subject[]
    /*
    // tag::counter-topic-event-subject[]
    ...
    // end::counter-topic-event-subject[]
    */
    // tag::counter-topic[]
    CounterTopicApi.Increased increased = // <1>
      CounterTopicApi.Increased.newBuilder() 
        .setValue(valueIncreased.getValue())
        .build(); 

    CounterApi.GetCounter getCounter = 
      CounterApi.GetCounter.newBuilder()
        .setCounterId(counterId.get())
        .build();

    return effects().reply(increased).addSideEffect(SideEffect.of(getterCallRef.createCall(getCounter))); // <2>
  // tag::counter-topic-event-subject[]
  }
  // end::counter-topic-event-subject[]
  // end::counter-topic[]

  /** Handler for "Decrease". */
  @Override
  public Effect<CounterTopicApi.Decreased> decrease(CounterDomain.ValueDecreased valueDecreased) {
    CounterTopicApi.Decreased decreased =
        CounterTopicApi.Decreased.newBuilder()
            .setValue(valueDecreased.getValue())
            .build();

    return effects().reply(decreased);
  }
  
  // tag::counter-ignore[]
  @Override
  public Effect<Empty> ignore(Any any) {
    return effects().noReply(); // <1>
  }
  // tag::counter-topic[]
}
  // end::counter-ignore[]
// end::counter-topic[]