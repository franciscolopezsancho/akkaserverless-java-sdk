<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  <packaging>jar</packaging>

  <name>${artifactId}</name>

  #set( $D = '$' )

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- TODO Update to your own Docker repository or Docker Hub scope -->
    <akkasls.dockerImage>my-docker-repo/${D}{project.artifactId}</akkasls.dockerImage>
    <akkasls.dockerTag>${D}{project.version}</akkasls.dockerTag>
    <akkasls.mainClass>${package}.Main</akkasls.mainClass>
    <jdk.target>11</jdk.target>
  </properties>

  <build>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.6.0</version>
      </extension>
    </extensions>
    <resources>
      <!-- Ensures that the generated protobuf descriptor is on the classpath,
           to ensure source mapping works -->
      <resource>
        <directory>${D}{project.build.directory}/generated-resources</directory>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <!-- java version -->
          <source>${D}{jdk.target}</source>
          <target>${D}{jdk.target}</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <writeDescriptorSet>true</writeDescriptorSet>
          <includeSourceInfoInDescriptorSet>true</includeSourceInfoInDescriptorSet>
          <descriptorSetFileName>user-function.desc</descriptorSetFileName>
          <checkStaleness>true</checkStaleness>
          <protocArtifact>com.google.protobuf:protoc:3.9.1:exe:${D}{os.detected.classifier}</protocArtifact>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>reference.conf</resource>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <!-- main entry class -->
                  <mainClass>${D}{akkasls.mainClass}</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.26.1</version>
        <configuration>
          <images>
            <image>
              <name>${D}{akkasls.dockerImage}:%l</name>
              <build>
                <!-- Base Docker image which contains jre-->
                <from>docker.io/library/adoptopenjdk:${D}{jdk.target}-jre-hotspot</from>
                <tags>
                  <!-- tag for generated image -->
                  <tag>${D}{akkasls.dockerTag}</tag>
                </tags>
                <ports>
                  <!-- expose port in Docker container -->
                  <port>8080</port>
                </ports>
                <assembly>
                  <!-- NOTE: (optional) switch to "artifact-with-dependencies" to show dependencies library-->
                  <descriptorRef>artifact</descriptorRef>
                </assembly>
                <entryPoint>
                  <arg>java</arg>
                  <arg>-jar</arg>
                  <arg>/maven/${D}{project.build.finalName}.jar</arg>
                </entryPoint>
              </build>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>build-docker-image</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
          <execution>
            <id>push-docker-image</id>
            <phase>deploy</phase>
            <goals>
              <goal>push</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <mainClass>${D}{akkasls.mainClass}</mainClass>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.lightbend</groupId>
        <artifactId>akkasls-maven-plugin</artifactId>
        <version>@project.version@</version>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dockerImage>${D}{akkasls.dockerImage}:${D}{akkasls.dockerTag}</dockerImage>
          <mainClass>${D}{akkasls.mainClass}</mainClass>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.0.0-M1</version>
        <configuration>
            <skip>true</skip>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <repositories>
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>bintray-lightbend-akkaserverless</id>
      <name>bintray</name>
      <url>https://lightbend.bintray.com/akkaserverless</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>bintray-lightbend-akkaserverless</id>
      <name>bintray</name>
      <url>https://lightbend.bintray.com/akkaserverless</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <dependency>
      <groupId>com.akkaserverless</groupId>
      <artifactId>akkaserverless-java-sdk</artifactId>
      <version>0.7.0-beta.1</version>
    </dependency>
    <dependency> 
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>3.7.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
